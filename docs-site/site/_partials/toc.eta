<!-- Table of Contents with Tailwind utility classes -->
<div id="toc" class="sticky top-24 h-fit max-h-[calc(100vh-12rem)] pt-12 mb-24">
    <div class="bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700 ml-4 overflow-hidden flex flex-col max-h-[calc(100vh-12rem)]">
        <h4 class="text-sm font-semibold text-gray-900 dark:text-white px-4 py-3 border-b border-gray-200 dark:border-gray-600 flex-shrink-0">On This Page</h4>
        <nav class="space-y-1 overflow-y-auto flex-1 min-h-0 px-4 py-3 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent hover:scrollbar-thumb-gray-400 dark:hover:scrollbar-thumb-gray-500" id="toc-nav">
        </nav>
    </div>
</div>

<script>
/* eslint-env browser */
/* global document, window, history, IntersectionObserver, setTimeout */

/**
 * Table of Contents functionality
 * Handles TOC generation, smooth scrolling and active link highlighting
 */
(function() {
  let tocLinkHandlers = [];
  let observer = null;

  function initializeTOC() {
    const toc = document.getElementById('toc');
    const tocNav = document.getElementById('toc-nav');
    if (!toc || !tocNav) return;

    // Get all headings with IDs from the content
    const headings = Array.from(document.querySelectorAll('h2[id], h3[id], h4[id], h5[id], h6[id]'));

    if (headings.length === 0) {
      // Hide TOC if no headings found
      toc.style.display = 'none';
      return;
    }

    // Generate TOC links with Tailwind classes
    const tocLinks = [];
    headings.forEach((heading) => {
      const level = parseInt(heading.tagName.charAt(1)); // Extract number from h1, h2, etc.
      const id = heading.getAttribute('id');
      const text = heading.textContent.trim();

      if (id && text) {
        const link = document.createElement('a');
        link.href = '#' + id;

        // Base classes for all TOC links
        let classes =
          'block text-sm text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400 transition-colors duration-200 py-1 border-l-2 border-transparent hover:border-blue-600 dark:hover:border-blue-400 rounded-r no-underline';

        // Add indentation based on heading level
        switch (level) {
          case 2:
            classes += ' pl-3';
            break;
          case 3:
            classes += ' pl-6';
            break;
          case 4:
            classes += ' pl-9';
            break;
          case 5:
            classes += ' pl-12';
            break;
          case 6:
            classes += ' pl-16';
            break;
          default:
            classes += ' pl-3';
        }

        link.className = classes;
        link.setAttribute('data-target', id);
        link.textContent = text;

        tocNav.appendChild(link);
        tocLinks.push(link);
      }
    });

    // If we have less than 2 headings, hide the TOC
    if (tocLinks.length < 2) {
      toc.style.display = 'none';
      return;
    }

    // Smooth scroll to section on click
    tocLinks.forEach((link) => {
      const clickHandler = function (e) {
        e.preventDefault();

        const targetId = this.getAttribute('data-target');
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          // Smooth scroll to the target
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });

          // Update URL hash
          history.pushState(null, null, '#' + targetId);
        }
      };
      link.addEventListener('click', clickHandler);
      tocLinkHandlers.push({ element: link, handler: clickHandler });
    });

    // Highlight active section on scroll
    observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');

            // Remove active state from all links
            tocLinks.forEach((link) => {
              link.classList.remove(
                'text-blue-600',
                'dark:text-blue-400',
                'border-blue-600',
                'dark:border-blue-400',
                'font-medium',
                'bg-blue-50',
                'dark:bg-blue-900/20',
              );
              link.classList.add('text-gray-600', 'dark:text-gray-300');
            });

            // Add active state to current link
            const activeLink = tocNav.querySelector(`[data-target="${id}"]`);
            if (activeLink) {
              activeLink.classList.remove('text-gray-600', 'dark:text-gray-300');
              activeLink.classList.add(
                'text-blue-600',
                'dark:text-blue-400',
                'border-blue-600',
                'dark:border-blue-400',
                'font-medium',
                'bg-blue-50',
                'dark:bg-blue-900/20',
              );
            }
          }
        });
      },
      {
        rootMargin: '-100px 0px -80% 0px',
        threshold: 0,
      },
    );

    // Observe all headings
    headings.forEach((heading) => {
      observer.observe(heading);
    });

    // Handle initial hash on page load
    if (window.location.hash) {
      const targetId = window.location.hash.substring(1);
      const targetElement = document.getElementById(targetId);
      const targetLink = tocNav.querySelector(`[data-target="${targetId}"]`);

      if (targetElement && targetLink) {
        // Remove active state from all links
        tocLinks.forEach((link) => {
          link.classList.remove(
            'text-blue-600',
            'dark:text-blue-400',
            'border-blue-600',
            'dark:border-blue-400',
            'font-medium',
            'bg-blue-50',
            'dark:bg-blue-900/20',
          );
          link.classList.add('text-gray-600', 'dark:text-gray-300');
        });

        // Add active state to target link
        targetLink.classList.remove('text-gray-600', 'dark:text-gray-300');
        targetLink.classList.add(
          'text-blue-600',
          'dark:text-blue-400',
          'border-blue-600',
          'dark:border-blue-400',
          'font-medium',
          'bg-blue-50',
          'dark:bg-blue-900/20',
        );

        // Smooth scroll to target after a brief delay to ensure page is loaded
        setTimeout(() => {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });
        }, 100);
      }
    }
  }

  function cleanupTOC() {
    // Remove all click event listeners
    tocLinkHandlers.forEach(({ element, handler }) => {
      element.removeEventListener('click', handler);
    });
    tocLinkHandlers = [];

    // Disconnect IntersectionObserver
    if (observer) {
      observer.disconnect();
      observer = null;
    }
  }

  // Initialize on load
  document.addEventListener('DOMContentLoaded', initializeTOC);

  // Cleanup on unload to prevent memory leaks
  window.addEventListener('beforeunload', cleanupTOC);
})();
</script>
