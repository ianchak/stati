<%
// Hardcoded section definitions with their routes, colors, icons, and display names
const sections = [
  {
    path: '/getting-started',
    displayName: 'Getting Started',
    color: 'primary',
    icon: 'M13 10V3L4 14h7v7l9-11h-7z',
  },
  {
    path: '/core-concepts',
    displayName: 'Core Concepts',
    color: 'emerald',
    icon: 'M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z',
  },
  {
    path: '/configuration',
    displayName: 'Configuration',
    color: 'amber',
    icon: 'M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065zM15 12a3 3 0 11-6 0 3 3 0 016 0z',
  },
  {
    path: '/cli',
    displayName: 'CLI & Tooling',
    color: 'purple',
    icon: 'M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z',
  },
  {
    path: '/api',
    displayName: 'API Reference',
    color: 'red',
    icon: 'M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4',
  },
  {
    path: '/examples',
    displayName: 'Examples',
    color: 'cyan',
    icon: 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10',
  },
  {
    path: '/advanced',
    displayName: 'Advanced',
    color: 'gray',
    icon: 'M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1',
  },
];
%>
<aside id="sidebar" class="fixed top-18 left-0 w-80 h-[calc(100vh-4.5rem)] bg-white/80 dark:bg-dark-900/80 backdrop-blur-xl border-r border-gray-200/60 dark:border-dark-700/60 overflow-y-auto transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out z-40 shadow-xl shadow-gray-900/5">
    <nav class="p-6">
        <!-- Search Bar -->
        <div class="mb-8">
            <div class="relative">
                <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <input type="search" placeholder="Search documentation..." class="w-full pl-10 pr-4 py-2.5 text-sm bg-gray-50/80 dark:bg-dark-800/80 border border-gray-200/60 dark:border-dark-700/60 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500/50 focus:border-primary-500 transition-all duration-200 placeholder-gray-400">
            </div>
        </div>

        <div class="space-y-6">
            <% // Iterate over hardcoded sections and list their child pages dynamically
            sections.forEach(section => {
              // Get child pages for this section using nav helper
              const sectionChildren = stati.nav.getChildren(section.path);
              const color = section.color;
              const sectionSlug = section.path.substring(1); // Remove leading slash
            %>
            <!-- <%= section.displayName %> -->
            <div class="nav-section">
                <button class="<%= stati.propValue('section-toggle flex items-center justify-between w-full px-4 py-3 text-left rounded-xl transition-all duration-200 group', `bg-gradient-to-r from-${color}-50 to-${color}-100/50 dark:from-${color}-900/20 dark:to-${color}-800/20`, `border border-${color}-200/50 dark:border-${color}-800/50`, `hover:shadow-md hover:shadow-${color}-500/10`) %>" data-section="<%= sectionSlug %>">
                    <div class="flex items-center space-x-3">
                        <div class="<%= stati.propValue('flex items-center justify-center w-8 h-8 rounded-lg', `bg-${color}-500/10 dark:bg-${color}-400/20`) %>">
                            <svg class="<%= stati.propValue('w-4 h-4', `text-${color}-600 dark:text-${color}-400`) %>" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="<%= section.icon %>" />
                            </svg>
                        </div>
                        <span class="font-semibold text-gray-900 dark:text-white text-sm"><%= section.displayName %></span>
                    </div>
                    <svg class="w-4 h-4 text-gray-500 transform transition-transform duration-200 group-data-[expanded=true]:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                </button>
                <div class="section-content mt-2 space-y-1 pl-4" data-section="<%= sectionSlug %>">
                    <% sectionChildren.forEach(page => { %>
                    <a href="<%= page.url %>" class="<%= stati.propValue('sidebar-link flex items-center px-4 py-2.5 text-sm text-gray-600 dark:text-gray-300 rounded-lg transition-all duration-200 font-medium group', `hover:text-${color}-600 dark:hover:text-${color}-400`, `hover:bg-${color}-50/60 dark:hover:bg-${color}-900/20`) %>">
                        <span class="<%= stati.propValue('w-2 h-2 bg-gray-300 dark:bg-gray-600 rounded-full mr-3 transition-colors duration-200', `group-hover:bg-${color}-500`) %>"></span>
                        <%= page.title %>
                    </a>
                    <% }) %>
                </div>
            </div>
            <% }) %>
        </div>
    </nav>
</aside>

<!-- Mobile menu overlay -->
<div class="fixed inset-0 bg-black/20 backdrop-blur-sm lg:hidden z-30 opacity-0 pointer-events-none transition-opacity duration-300" id="sidebar-overlay"></div>

<script>
// Sidebar functionality
document.addEventListener('DOMContentLoaded', function() {
    // Get sidebar element reference (used throughout)
    const sidebar = document.getElementById('sidebar');

    // Initialize sidebar state
    const sidebarState = JSON.parse(localStorage.getItem('sidebarState') || '{}');

    // Restore scroll position
    const savedScrollPosition = localStorage.getItem('sidebarScrollPosition');
    if (savedScrollPosition && sidebar) {
        sidebar.scrollTop = parseInt(savedScrollPosition, 10);
    }

    // Save scroll position when user scrolls
    let scrollTimeout;
    if (sidebar) {
        sidebar.addEventListener('scroll', () => {
            // Debounce scroll events to avoid excessive localStorage writes
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                localStorage.setItem('sidebarScrollPosition', sidebar.scrollTop.toString());
            }, 100);
        });
    }

    // Set up section toggles
    document.querySelectorAll('.section-toggle').forEach(toggle => {
        const sectionName = toggle.getAttribute('data-section');
        const content = toggle.nextElementSibling;
        const isExpanded = sidebarState[sectionName] !== false; // Default to expanded

        // Set initial state
        if (isExpanded) {
            toggle.setAttribute('data-expanded', 'true');
            content.style.maxHeight = content.scrollHeight + 'px';
        } else {
            content.style.maxHeight = '0px';
            content.style.overflow = 'hidden';
        }

        // Handle toggle clicks
        toggle.addEventListener('click', () => {
            const isCurrentlyExpanded = toggle.getAttribute('data-expanded') === 'true';

            if (isCurrentlyExpanded) {
                toggle.removeAttribute('data-expanded');
                content.style.maxHeight = '0px';
                content.style.overflow = 'hidden';
                sidebarState[sectionName] = false;
            } else {
                toggle.setAttribute('data-expanded', 'true');
                content.style.maxHeight = content.scrollHeight + 'px';
                content.style.overflow = 'visible';
                sidebarState[sectionName] = true;
            }

            localStorage.setItem('sidebarState', JSON.stringify(sidebarState));
        });
    });

    // Highlight active page
    const currentPath = window.location.pathname;

    // Normalize path for comparison (handle trailing slashes and index.html)
    const normalizePath = (path) => {
        // Remove index.html if present
        path = path.replace(/\/index\.html$/, '/');
        // Ensure trailing slash for directories
        if (!path.endsWith('/') && !path.includes('.')) {
            path += '/';
        }
        return path;
    };

    const normalizedCurrentPath = normalizePath(currentPath);

    document.querySelectorAll('.sidebar-link').forEach(link => {
        const linkHref = link.getAttribute('href');
        const normalizedLinkHref = normalizePath(linkHref);

        if (normalizedLinkHref === normalizedCurrentPath) {
            // Add the active class
            link.classList.add('active');

            // Determine section-specific colors for active state
            const section = link.closest('.nav-section');
            const toggle = section.querySelector('.section-toggle');
            const sectionName = toggle.getAttribute('data-section');

            // Add section-specific active class
            link.classList.add(`active-${sectionName}`);

            // Expand parent section if needed
            const content = section.querySelector('.section-content');

            toggle.setAttribute('data-expanded', 'true');
            content.style.maxHeight = content.scrollHeight + 'px';
            content.style.overflow = 'visible';

            sidebarState[sectionName] = true;
            localStorage.setItem('sidebarState', JSON.stringify(sidebarState));
        }
    });

    // Mobile sidebar toggle
    const mobileMenuButton = document.querySelector('[data-mobile-menu]');
    const overlay = document.getElementById('sidebar-overlay');
    const sidebarToggleBtn = document.getElementById('sidebar-toggle-btn');

    if (mobileMenuButton && sidebar && overlay) {
        mobileMenuButton.addEventListener('click', () => {
            const isHidden = sidebar.classList.contains('-translate-x-full');
            sidebar.classList.toggle('-translate-x-full');
            overlay.classList.toggle('opacity-0');
            overlay.classList.toggle('pointer-events-none');

            // Hide toggle button when sidebar is open
            if (sidebarToggleBtn) {
                if (isHidden) {
                    // Sidebar is opening
                    sidebarToggleBtn.classList.add('opacity-0', 'pointer-events-none');
                } else {
                    // Sidebar is closing
                    sidebarToggleBtn.classList.remove('opacity-0', 'pointer-events-none');
                }
            }
        });

        overlay.addEventListener('click', () => {
            sidebar.classList.add('-translate-x-full');
            overlay.classList.add('opacity-0', 'pointer-events-none');

            // Show toggle button when sidebar is closed
            if (sidebarToggleBtn) {
                sidebarToggleBtn.classList.remove('opacity-0', 'pointer-events-none');
            }
        });

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', (e) => {
            if (window.innerWidth < 1024 &&
                !sidebar.contains(e.target) &&
                !mobileMenuButton.contains(e.target) &&
                !overlay.contains(e.target) &&
                !sidebar.classList.contains('-translate-x-full')) {
                sidebar.classList.add('-translate-x-full');
                overlay.classList.add('opacity-0', 'pointer-events-none');

                // Show toggle button when sidebar is closed
                if (sidebarToggleBtn) {
                    sidebarToggleBtn.classList.remove('opacity-0', 'pointer-events-none');
                }
            }
        });

        // Close sidebar on window resize to desktop
        window.addEventListener('resize', () => {
            if (window.innerWidth >= 1024) {
                // Desktop: show sidebar, hide overlay, hide toggle button
                sidebar.classList.remove('-translate-x-full');
                overlay.classList.add('opacity-0', 'pointer-events-none');
                if (sidebarToggleBtn) {
                    sidebarToggleBtn.classList.add('opacity-0', 'pointer-events-none');
                }
            } else {
                // Mobile: hide sidebar by default, show toggle button
                sidebar.classList.add('-translate-x-full');
                overlay.classList.add('opacity-0', 'pointer-events-none');
                if (sidebarToggleBtn) {
                    sidebarToggleBtn.classList.remove('opacity-0', 'pointer-events-none');
                }
            }
        });
    }
});
</script>
