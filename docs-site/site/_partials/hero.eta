<!-- Hero Section -->
<section class="relative bg-gradient-to-br from-white via-blue-50/30 to-indigo-50/50 dark:from-dark-950 dark:via-dark-900/90 dark:to-dark-800/80 py-24 lg:py-32 overflow-hidden">
    <!-- Particles.js container -->
    <div id="particles-js" class="absolute inset-0"></div>

    <!-- Animated background elements -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-24 -left-24 w-96 h-96 bg-gradient-to-br from-primary-200/20 to-blue-200/15 dark:from-primary-800/15 dark:to-blue-800/10 rounded-full blur-3xl animate-pulse"></div>
        <div class="absolute -bottom-24 -right-24 w-80 h-80 bg-gradient-to-tl from-indigo-200/20 to-purple-200/15 dark:from-indigo-800/15 dark:to-purple-800/10 rounded-full blur-3xl animate-pulse" style="animation-delay: 1s"></div>
    </div>

    <!-- Grid pattern overlay -->
    <div class="absolute inset-0 bg-grid-pattern opacity-3 dark:opacity-5 pointer-events-none"></div>

    <div class="relative max-w-7xl mx-auto px-6 lg:px-8">
        <div class="text-center animate-fade-in">
            <h1 class="text-6xl lg:text-7xl xl:text-8xl font-bold mb-8 text-gray-900 dark:text-white leading-none">
                <span class="bg-gradient-to-r from-primary-600 via-blue-600 to-indigo-600 dark:from-primary-400 dark:via-blue-400 dark:to-indigo-400 bg-clip-text text-transparent">
                    <%= stati.page.hero?.title || stati.site.title %>
                </span>
            </h1>

            <p class="text-xl lg:text-2xl text-gray-600 dark:text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed font-medium">
                <%~ stati.page.hero?.subtitle || stati.page.description %>
            </p>

            <div class="flex flex-col sm:flex-row gap-6 justify-center items-center mb-16">
                <% for (let button of (stati.page.hero?.buttons || [])) { %>
                <a href="<%= button.url %>"
                   class="<%= button.primary ? 'group relative bg-gradient-to-r from-primary-500 via-primary-600 to-blue-600 hover:from-primary-600 hover:via-primary-700 hover:to-blue-700 text-white shadow-glow hover:shadow-glow-lg border border-primary-400/20 hover:border-primary-300/30 hover:-translate-y-1 hover:scale-[1.02] px-8 py-4 rounded-2xl font-semibold transition-all duration-300 transform' : 'group bg-white/90 dark:bg-dark-800/90 backdrop-blur-md border border-gray-200/60 dark:border-dark-600/60 hover:border-primary-300/40 dark:hover:border-primary-600/40 text-gray-800 dark:text-gray-100 hover:bg-white dark:hover:bg-dark-700/90 shadow-soft hover:shadow-soft-lg hover:-translate-y-0.5 hover:scale-[1.02] px-8 py-4 rounded-2xl font-semibold transition-all duration-300 transform' %>">
                    <% if (button.primary) { %>
                    <div class="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <% } %>
                    <span class="relative flex items-center">
                        <%= button.text %>
                        <% if (button.primary) { %>
                        <svg class="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                        </svg>
                        <% } else { %>
                        <svg class="ml-2 w-5 h-5 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 group-hover:translate-x-0.5 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                        <% } %>
                    </span>
                </a>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Particles.js configuration -->
    <script>
        // Initialize particles only if the library is loaded
        if (typeof particlesJS !== 'undefined') {
            particlesJS('particles-js', {
                "particles": {
                    "number": {
                        "value": 120,
                        "density": {
                            "enable": true,
                            "value_area": 800
                        }
                    },
                    "color": {
                        "value": ["#3b82f6", "#6366f1", "#8b5cf6", "#06b6d4"]
                    },
                    "shape": {
                        "type": ["circle", "triangle", "polygon"],
                        "stroke": {
                            "width": 0,
                            "color": "#000000"
                        },
                        "polygon": {
                            "nb_sides": 6
                        }
                    },
                    "opacity": {
                        "value": 0.3,
                        "random": true,
                        "anim": {
                            "enable": true,
                            "speed": 1,
                            "opacity_min": 0.1,
                            "sync": false
                        }
                    },
                    "size": {
                        "value": 3,
                        "random": true,
                        "anim": {
                            "enable": true,
                            "speed": 2,
                            "size_min": 0.5,
                            "sync": false
                        }
                    },
                    "line_linked": {
                        "enable": true,
                        "distance": 150,
                        "color": "#3b82f6",
                        "opacity": 0.2,
                        "width": 1
                    },
                    "move": {
                        "enable": true,
                        "speed": 1.5,
                        "direction": "none",
                        "random": true,
                        "straight": false,
                        "out_mode": "out",
                        "bounce": false,
                        "attract": {
                            "enable": true,
                            "rotateX": 600,
                            "rotateY": 1200
                        }
                    }
                },
                "interactivity": {
                    "detect_on": "canvas",
                    "events": {
                        "onhover": {
                            "enable": true,
                            "mode": "grab"
                        },
                        "onclick": {
                            "enable": true,
                            "mode": "push"
                        },
                        "resize": true
                    },
                    "modes": {
                        "grab": {
                            "distance": 200,
                            "line_linked": {
                                "opacity": 0.5
                            }
                        },
                        "push": {
                            "particles_nb": 4
                        }
                    }
                },
                "retina_detect": true
            });

            // Dark mode adaptation
            const updateParticleColors = () => {
                const isDark = document.documentElement.classList.contains('dark') ||
                              window.matchMedia('(prefers-color-scheme: dark)').matches;

                if (window.pJSDom && window.pJSDom[0] && window.pJSDom[0].pJS) {
                    const particles = window.pJSDom[0].pJS.particles;
                    const newColors = isDark ?
                        ["#60a5fa", "#818cf8", "#a78bfa", "#22d3ee"] :
                        ["#3b82f6", "#6366f1", "#8b5cf6", "#06b6d4"];

                    particles.color.value = newColors;
                    particles.line_linked.color = isDark ? "#60a5fa" : "#3b82f6";
                    particles.line_linked.opacity = isDark ? 0.15 : 0.2;

                    // Update existing particles
                    if (particles.array) {
                        particles.array.forEach((particle, index) => {
                            particle.color.value = newColors[index % newColors.length];
                        });
                    }
                }
            };

            // Watch for theme changes
            const observer = new MutationObserver(updateParticleColors);
            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['class']
            });

            // Initial color setup
            setTimeout(updateParticleColors, 100);
        }
    </script>
</section>
