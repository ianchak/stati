<!-- Hero Section -->
<section class="relative bg-gradient-to-b from-white via-white to-gray-50/30 dark:from-dark-950 dark:via-dark-950 dark:to-dark-900/30 overflow-hidden">
    <!-- Decorative background elements -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <!-- Animated gradient orbs -->
        <div class="<%= stati.propValue('absolute -top-20 left-1/4 w-96 h-96 bg-primary-400/8 dark:bg-primary-500/12 rounded-full blur-3xl animate-pulse') %>"></div>
        <div class="<%= stati.propValue('absolute -bottom-20 right-1/4 w-96 h-96 bg-blue-400/8 dark:bg-blue-500/12 rounded-full blur-3xl animate-pulse') %>" style="animation-delay: 2s"></div>
    </div>

    <!-- Particles container -->
    <div id="particles-js" class="<%= stati.propValue('absolute inset-0 opacity-40 dark:opacity-30') %>"></div>

    <!-- Content -->
    <div class="<%= stati.propValue('relative z-10 max-w-7xl mx-auto px-6 lg:px-12 py-32 lg:py-48') %>">
        <div class="text-center">
            <!-- Main Title -->
            <div class="mb-8">
                <h1 class="<%= stati.propValue('text-9xl sm:text-[10rem] md:text-[12rem] lg:text-[14rem] xl:text-[16rem] font-black leading-none tracking-tighter') %>">
                    <span class="<%= stati.propValue('inline-block bg-gradient-to-br from-primary-600 via-primary-500 to-blue-600 dark:from-primary-400 dark:via-primary-300 dark:to-blue-400 bg-clip-text text-transparent') %>"
                          style="letter-spacing: -0.05em;">
                        <%= stati.page.hero?.title || stati.site.title %>
                    </span>
                </h1>
            </div>

            <!-- Subtitle -->
            <p class="<%= stati.propValue('text-xl sm:text-2xl md:text-3xl text-gray-600 dark:text-gray-300 mb-16 max-w-3xl mx-auto leading-relaxed font-light') %>">
                <%~ stati.page.hero?.subtitle || stati.page.description %>
            </p>

            <!-- CTA Buttons -->
            <div class="<%= stati.propValue('flex flex-col sm:flex-row gap-5 justify-center items-center') %>">
                <% for (let button of (stati.page.hero?.buttons || [])) { %>
                <% if (button.primary) { %>
                <a href="<%= button.url %>"
                   class="<%= stati.propValue('group relative bg-gradient-to-r from-primary-500 to-blue-700 hover:from-primary-600 hover:to-blue-800 text-white px-10 py-4 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-0.5') %>">
                    <span class="<%= stati.propValue('relative flex items-center gap-2') %>">
                        <%= button.text %>
                        <svg class="<%= stati.propValue('w-5 h-5 transition-transform duration-300 group-hover:translate-x-1') %>"
                             fill="none"
                             stroke="currentColor"
                             viewBox="0 0 24 24">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M13 7l5 5m0 0l-5 5m5-5H6" />
                        </svg>
                    </span>
                </a>
                <% } else { %>
                <a href="<%= button.url %>"
                   class="<%= stati.propValue('group bg-white/80 dark:bg-dark-800/80 backdrop-blur-sm border-2 border-gray-200 dark:border-dark-600 hover:border-primary-400 dark:hover:border-primary-500 text-gray-900 dark:text-gray-100 px-10 py-4 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-0.5') %>">
                    <span class="<%= stati.propValue('relative flex items-center gap-2') %>">
                        <%= button.text %>
                        <svg class="<%= stati.propValue('w-5 h-5 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-transform duration-300 group-hover:translate-x-0.5') %>"
                             fill="none"
                             stroke="currentColor"
                             viewBox="0 0 24 24">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M9 5l7 7-7 7" />
                        </svg>
                    </span>
                </a>
                <% } %>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Particles.js configuration -->
    <script>
        function initParticles() {
            if (typeof particlesJS === 'undefined') {
                setTimeout(initParticles, 50);
                return;
            }

            particlesJS('particles-js', {
                "particles": {
                    "number": {
                        "value": 60,
                        "density": {
                            "enable": true,
                            "value_area": 1000
                        }
                    },
                    "color": {
                        "value": ["#3b82f6", "#6366f1"]
                    },
                    "shape": {
                        "type": "circle"
                    },
                    "opacity": {
                        "value": 0.4,
                        "random": true,
                        "anim": {
                            "enable": true,
                            "speed": 1,
                            "opacity_min": 0.15,
                            "sync": false
                        }
                    },
                    "size": {
                        "value": 3.5,
                        "random": true,
                        "anim": {
                            "enable": true,
                            "speed": 2,
                            "size_min": 1,
                            "sync": false
                        }
                    },
                    "line_linked": {
                        "enable": true,
                        "distance": 150,
                        "color": "#3b82f6",
                        "opacity": 0.25,
                        "width": 1.5
                    },
                    "move": {
                        "enable": true,
                        "speed": 1,
                        "direction": "none",
                        "random": true,
                        "straight": false,
                        "out_mode": "out",
                        "bounce": false
                    }
                },
                "interactivity": {
                    "detect_on": "canvas",
                    "events": {
                        "onhover": {
                            "enable": true,
                            "mode": "grab"
                        },
                        "resize": true
                    },
                    "modes": {
                        "grab": {
                            "distance": 180,
                            "line_linked": {
                                "opacity": 0.3
                            }
                        }
                    }
                },
                "retina_detect": true
            });

            // Dark mode adaptation
            const updateParticleColors = () => {
                const isDark = document.documentElement.classList.contains('dark') ||
                              window.matchMedia('(prefers-color-scheme: dark)').matches;

                if (window.pJSDom && window.pJSDom[0] && window.pJSDom[0].pJS) {
                    const particles = window.pJSDom[0].pJS.particles;
                    const newColors = isDark ? ["#60a5fa", "#818cf8"] : ["#3b82f6", "#6366f1"];

                    particles.color.value = newColors;
                    particles.line_linked.color = isDark ? "#60a5fa" : "#3b82f6";
                    particles.line_linked.opacity = isDark ? 0.2 : 0.25;

                    if (particles.array) {
                        particles.array.forEach((particle, index) => {
                            particle.color.value = newColors[index % newColors.length];
                        });
                    }
                }
            };

            const observer = new MutationObserver(updateParticleColors);
            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['class']
            });

            setTimeout(updateParticleColors, 100);
        }

        initParticles();
    </script>
</section>
